<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Hylu Blog</title>
    <link>http://localhost:1313/tags/unity/</link>
    <description>Recent content in Unity on Hylu Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jun 2024 23:56:04 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Responsive Melee Combat</title>
      <link>http://localhost:1313/posts/2024/06/responsive-melee-combat/</link>
      <pubDate>Wed, 05 Jun 2024 23:56:04 -0400</pubDate>
      <guid>http://localhost:1313/posts/2024/06/responsive-melee-combat/</guid>
      <description>What is Responsive Combat Whether it&amp;rsquo;s an attack, dodge, or block, responsive combat ensures each feels immediate and with appropriate feedback. Games like Hades got this nailed down to a tee. Attacks feel punchy with minimal delay and the player rarely feels like their fighting with the controls to get the game to do what they want. By providing precise control over the character&amp;rsquo;s abilities, responsive combat enhances the sense of agency and satisfaction, leading to more intense and rewarding gameplay experiences.</description>
    </item>
    <item>
      <title>Real Time Toon Shading in Unity</title>
      <link>http://localhost:1313/posts/2024/05/real-time-toon-shading/</link>
      <pubDate>Sun, 12 May 2024 00:12:51 -0400</pubDate>
      <guid>http://localhost:1313/posts/2024/05/real-time-toon-shading/</guid>
      <description>Toon Shading We&amp;rsquo;ll be using a numbers of methods from Unity&amp;rsquo;s URP package by importing Lighting.hlsl. That file has some other inclusions that we will also make direct use of. In all, we&amp;rsquo;ll be using the following files.
Lighting.hlsl RealTimeLights.hlsl Shadows.hlsl SpaceTransforms.hlsl Lighting.hlsl RealTimeLights.hlsl. In order to ensure our reacts to light in real-time, we need to hook on to some of Unity&amp;rsquo;s lighting methods to acquire the lights in the scene as well as the shadow maps.</description>
    </item>
    <item>
      <title>Unity Custom Passes with URP</title>
      <link>http://localhost:1313/posts/2024/05/unity-custom-render-pipeline/</link>
      <pubDate>Tue, 07 May 2024 12:35:27 -0400</pubDate>
      <guid>http://localhost:1313/posts/2024/05/unity-custom-render-pipeline/</guid>
      <description>I&amp;rsquo;m documenting some of my adventures looking into the Scriptable Render Pipelines in Unity. I have the goal of creating a stylized 3D pixel-art render pipeline heavily inspired by t3ssel8r.
What is URP Cel-Shading Rendering To an Intermediate Texture During rendering passes, it&amp;rsquo;s common to store information by rendering to a texture instead of immediately rendering to the screen. For example, if you want to just do a pass to collect depth information, you can draw that information in memory and hold on to it to reference for later usage.</description>
    </item>
    <item>
      <title>Handling Normals from Unity to Blender</title>
      <link>http://localhost:1313/posts/2023/old/dev/handling_normals_from_unity_to_blender/</link>
      <pubDate>Mon, 15 May 2023 14:34:17 -0400</pubDate>
      <guid>http://localhost:1313/posts/2023/old/dev/handling_normals_from_unity_to_blender/</guid>
      <description>While trying to import a plane from Blender to Unity, I ran into the issue of the normals facing the wrong direction once imported into Unity. This was particularly an issue when it came to vertex shaders as any vertex transform performed incorrectly.
This crux of the issue is that Blender considers the z-axis to be the vertical axis while unity considers the y-axis to be. So, for a plane in Blender, the normals would face towards the positive z-axis but when imported to Unity, they remain so which to Unity is actually along the horizontal plane.</description>
    </item>
    <item>
      <title>Introduction to Unity Shaders</title>
      <link>http://localhost:1313/posts/2023/old/dev/intro_to_shaders/</link>
      <pubDate>Sat, 06 May 2023 13:26:32 -0400</pubDate>
      <guid>http://localhost:1313/posts/2023/old/dev/intro_to_shaders/</guid>
      <description>Shaders are programs used to describe how pixels should be arranged, colored, and transformed on the screen. The simple definition extends to so many applications especially in 3D graphics in movies and games. Every computer generated prop placed in a scene is carefully designed to look a certain way, all with the help of shaders.
Shader&amp;rsquo;s make use of the GPU to constantly run concurrent calculation on every pixel and you can decide what those calculations do through programming with languages such as HLSL and GLSL.</description>
    </item>
    <item>
      <title>3D Character Unity Setup</title>
      <link>http://localhost:1313/posts/2023/old/dev/3d_character_unity_setup/</link>
      <pubDate>Wed, 03 May 2023 10:54:02 -0400</pubDate>
      <guid>http://localhost:1313/posts/2023/old/dev/3d_character_unity_setup/</guid>
      <description>I followed this tutorial https://www.youtube.com/watch?v=bXNFxQpp2qk&amp;amp;list=PLwyUzJb_FNeQrIxCEjj5AMPwawsw5beAy&amp;amp;index=3
Adding a 3D Character Animation States Unity has it&amp;rsquo;s own skeleton rigging system called Mecanim.
To add animations to a character, you first need to add an animator component to your character model and then create a character controller object and link it to the component. Double clicking the controller will then open up a panel to handle state transitions between animations.
There you can add each of the states you want to transition your model to and from.</description>
    </item>
    <item>
      <title>Folder Structure and Making Mistakes</title>
      <link>http://localhost:1313/posts/2023/old/other/folder_structure/</link>
      <pubDate>Fri, 28 Apr 2023 15:44:49 -0400</pubDate>
      <guid>http://localhost:1313/posts/2023/old/other/folder_structure/</guid>
      <description>When using a programming engine or framework, one of the things I get stuck on the most is how to organize all the directories and files for a project. Every technology has its own separate ethos when it comes to the separation of concerns. It&amp;rsquo;s such an important part in order to not have a growing project becoming a nightmare for other&amp;rsquo;s to work with, or even yourself after spending some time away from it.</description>
    </item>
  </channel>
</rss>
